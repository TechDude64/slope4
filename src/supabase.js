import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

export const submitScore = async (playerName, score) => {
  try {
    const { data, error } = await supabase
      .from('leaderboard')
      .insert([{ player_name: playerName, score: score, created_at: new Date().toISOString() }])

    if (error) throw error
    return data
  } catch (error) {
    console.error('Error submitting score:', error)
    return null
  }
}

export const getLeaderboard = async () => {
  try {
    const { data, error } = await supabase
      .from('leaderboard')
      .select('player_name, score')
      .order('score', { ascending: false })
      .limit(10)

    if (error) throw error
    return data
  } catch (error) {
    console.error('Error fetching leaderboard:', error)
    return []
  }
}

export const createGame = async () => {
  try {
    const newGame = {
      // No need to specify `game_id` as it's auto-generated by the database
      created_at: new Date().toISOString(),
      // Add other relevant fields, e.g., host_id, status
    };

    const { data, error } = await supabase
      .from('games')
      .insert(newGame)
      .select('game_id'); // Select the `game_id` of the newly created game

    if (error) {
      throw error;
    }

    // The `game_id` will be in the first element of the returned data array
    return data[0].game_id;
  } catch (error) {
    console.error('Error creating game:', error);
    return null;
  }
};

export const getGame = async (gameId) => {
  try {
    const { data, error } = await supabase
      .from('games')
      .select('*')
      .eq('game_id', gameId)
      .single(); // Use single to get a single record or null

    if (error) {
      // If the error is due to no rows found, it's not a critical error
      if (error.code === 'PGRST116') {
        return null; // No game found with this ID
      }
      throw error;
    }

    return data;
  } catch (error) {
    console.error('Error fetching game:', error);
    return null;
  }
};
